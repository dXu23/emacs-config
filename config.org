Credit goes to Uncle Dave on Youtube for helping me set up my emacs config
* 'Fixing' Emacs
** Set emacs so that scratch buffer shows up instead of help screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
** Prevent emacs from freezing when pressing 'C-x C-c'
#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard-manager nil)
#+END_SRC
** Prevent emacs from making backup files
#+BEGIN_SRC emacs-lisp
(setq make-backup-file nil)
#+END_SRC
** Prevent emacs from auto-saving
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
#+END_SRC
** Make yes or no prompts as simple as typing 'y' or 'n'
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Adding '/usr/local/bin' to exec-path
#+BEGIN_SRC emacs-lisp
  (add-to-list 'exec-path "/usr/local/bin")
#+END_SRC
** Use newlines  as a separator when appending and prepending to registers
#+BEGIN_SRC emacs-lisp
  (setq register-separator ?+)
  (set-register register-separator "\n\n")
#+END_SRC
** Some preferred keybindings
     Set 'M-S-z' to zap-up-to-char
#+BEGIN_SRC emacs-lisp
  (global-set-key "\M-Z" 'zap-up-to-char)
#+END_SRC
* config edit/reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* Extra Packages
** package-list
#+BEGIN_SRC emacs-lisp
  ;; <use-package>
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  ;; </use-package
#+END_SRC
** ido-mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
  ;; (require 'ido)
  ;; (ido-mode t)
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+END_SRC

** beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC

** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
** rainbow 
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))

#+END_SRC
** switch-window
    Package to switch windows more quickly; Pressing C-x o now brings up a menu of keys
    corresponding to the window one wants to switch to
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))

#+END_SRC
** Cider
    Package for clojure
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t)
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow)))

#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t)
#+END_SRC
** 4clojure
#+BEGIN_SRC emacs-lisp
  (use-package 4clojure
    :ensure t)
#+END_SRC

** popup-kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
** htmlize
#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC
* Aesthetic Changes
** Change default tab-with to 4 spaces
#+BEGIN_SRC elisp
  (setq default-tab-width 4)
#+END_SRC
** Getting rid of all bars
*** Tool bar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

*** Menu bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

*** Scroll bar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC

** Highlight current line
#+BEGIN_SRC emacs-lisp
(when window-system (global-hl-line-mode t))
#+END_SRC
** Prettify symbols 
#+BEGIN_SRC emacs-lisp
(when window-system (global-prettify-symbols-mode t))
#+END_SRC
** Set font to M+ 1mn
#+BEGIN_SRC emacs-lisp
  (set-frame-font "M+ 1mn")
#+END_SRC
** Make emacs theme moe
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'moe-theme)
  (package-refresh-contents)
  (package-install 'moe-theme))

(require 'moe-theme)
(moe-light)
#+END_SRC
* Language-Specific Settings
** C
#+BEGIN_SRC elisp
  (setq-default c-basic-offset 4)
#+END_SRC
** Clojure
#+BEGIN_SRC elisp
  (use-package cider)
#+END_SRC
* Org
** Org-mode keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)
#+END_SRC

** Set org-log-done to true
#+BEGIN_SRC emacs-lisp
(setq org-log-done t)
#+END_SRC

** Set org-mode agenda files
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list "~/gtd/inbox.org"
			       "~/gtd/gtd.org"
			       "~/gtd/tickler.org"))

#+END_SRC

** Set priority range from A to C with default A
#+BEGIN_SRC emacs-lisp
  (setq org-highest-priority ?A)
  (setq org-lowest-priority ?C)
  (setq org-default-priority ?A)
#+END_SRC

** Set colors for priorities
#+BEGIN_SRC emacs-lisp
  (setq org-priority-faces '((?A . (:foreground "#DC143C" :weight bold))
			     (?B . (:foreground "#FFA500"))
			     (?C . (:foreground "#48D1CC"))))
#+END_SRC

** Org-mode templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
				 (file+headline "~/gtd/inbox.org" "Tasks")
				 "* TODO [#A] %i%?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n")
				("T" "Tickler" entry
				 (file+headline "~/gtd/tickler.org" "Tickler")
				 "* %i%? \n %U")))
#+END_SRC
** open agenda in current window
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-window-setup (quote current-window))
#+END_SRC

** Warn about any deadline in next 7 days
#+BEGIN_SRC emacs-lisp
  (setq org-deadline-warning-days 7)
#+END_SRC

** Show tasks scheduled/due in next fortnight
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-span (quote fortnight))
#+END_SRC

** Do not show tasks as scheduled if already shown as deadline
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
#+END_SRC

** Do not give warning colors to tasks w/ impending deadlines
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
#+END_SRC

** Do not show tasks that are scheduled or have deadlines in normal todo list
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-todo-ignore-deadlines (quote all))
  (setq org-agenda-todo-ignore-scheduled (quote all))
#+END_SRC

** How tasks should be sorted
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-sorting-strategy
	(quote
	 ((agenda deadline-up priority-down)
	  (todo priority-down category-keep)
	  (tags priority-down category-keep)
	  (search category-keep))))
#+END_SRC

** org-refile targets
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5)))
#+END_SRC
** org-mode todo keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "SOMEDAY(s)" "PROJ(p)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+END_SRC

** Turn off org-goto-auto-isearch
#+BEGIN_SRC emacs-lisp
  (setq org-goto-auto-isearch nil)

#+END_SRC
** Set org-indent to 2
#+BEGIN_SRC emacs-lisp
  (setq org-list-indent-offset 2)
#+END_SRC
** Save clock history across emacs sessions
#+BEGIN_SRC emacs-lisp
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
#+END_SRC

** Syntax highlight text in block
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC
** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Maximum indentation for description lists
#+BEGIN_SRC emacs-lisp
  (setq org-list-description-max-indent 5)
#+END_SRC
** prevent demoting heading
#+BEGIN_SRC emacs-lisp
  (setq org-adapt-indentation nil)

#+END_SRC

** Have org-mode support programming languages
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '(
	(shell . t)
	(C . t)
	(python . t)
	(R . t)
	(ditaa . t)
	(gnuplot . t)
	))
   #+END_SRC

* Terminal
** Setting default shell to bash
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

