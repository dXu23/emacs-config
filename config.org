
Credit goes to Uncle Dave on Youtube for helping me set up my emacs config

* config edit/reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* 'Fixing' Emacs
** Set emacs so that scratch buffer shows up instead of help screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
** Prevent emacs from freezing when pressing 'C-x C-c'
#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard-manager nil)
#+END_SRC
** Prevent emacs from making backup files
#+BEGIN_SRC emacs-lisp
(setq make-backup-file nil)
#+END_SRC
** Get rid of lock mode.
#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
#+END_SRC
** Prevent emacs from auto-saving
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
#+END_SRC
** Make yes or no prompts as simple as typing 'y' or 'n'
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Adding '/usr/local/bin' to exec-path
#+BEGIN_SRC emacs-lisp
  (add-to-list 'exec-path "/usr/local/bin")
#+END_SRC
** Set default tramp method to ssh
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC
** Use newlines  as a separator when appending and prepending to registers
#+BEGIN_SRC emacs-lisp
  (setq register-separator ?+)
  (set-register register-separator "\n\n")
#+END_SRC

** utf-8
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
#+end_src
** Relative line numbers
#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers 'relative)
#+END_SRC

* Some preferred keybindings
** Set 'M-S-z' to zap-up-to-char
#+BEGIN_SRC emacs-lisp
  (global-set-key "\M-Z" 'zap-up-to-char)
#+END_SRC
** Split and follow function
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    "Splits a window horizontally and follows to opened window"
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1)
    )

  

  (defun split-and-follow-vertically ()
    "Splits a window vertically and follows to opened window"
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1)
    )
 (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Making compiling easier
#+BEGIN_SRC emacs-lisp
  (defun compile-based-on-extension (&optional args) 
      "Compile/run a file based on its extension"
      (interactive "P")
      (setq file-extension (file-name-extension buffer-file-name))
      (setq executable-name (file-name-base buffer-file-name))
      (cond ((string= file-extension "c")
	    (compile (concat "cc -o " executable-name " " buffer-file-name " && ./" executable-name)))
	    ((string= file-extension "cpp")
	     (compile (concat "g++ -o " executable-name " " buffer-file-name " && ./" executable-name)))
	    ((string= file-extension "java")
	    (compile (concat "javac " buffer-file-name " && java " executable-name)))
      )
  )

  (defun my-compile ()
    (interactive)
    (let ((default-directory (locate-dominating-file "." "Makefile")))
      (compile "make")))


#+END_SRC
** Insert date and time easily
#+BEGIN_SRC emacs-lisp
  (defun mp-insert-date ()
    (interactive)
    (insert (format-time-string "%x")))

  (defun mp-insert-time ()
    (interactive)
    (insert (format-time-string "%X")))

  (global-set-key (kbd "C-c i d") 'mp-insert-date)
  (global-set-key (kbd "C-c i t") 'mp-insert-time)
#+END_SRC
** Copy rectangle region
#+BEGIN_SRC emacs-lisp
   (defun my-copy-rectangle (start end)
     "Copy the region-rectangle instead of `kill-rectangle'."
     (interactive "r")
     (delete-rectangle start end)
     (setq killed-rectangle (extract-rectangle start end)))

  (global-set-key (kbd "C-x r M-w") 'my-copy-rectangle)
#+END_SRC
* Preinstalled packages
** ido-mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-create-new-buffer 'always)
  (setq ido-use-filename-at-point 'guess)
  (ido-mode 1)
  ;; (require 'ido)
  ;; (ido-mode t)
#+END_SRC
** Whitespace
#+BEGIN_SRC emacs-lisp
  (require 'whitespace)
  (setq whitespace-style '(face empty tabs lines-tail trailing))
  (global-whitespace-mode t)
#+END_SRC
** Org
*** Org-mode keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)
#+END_SRC

*** Require org-drill
#+BEGIN_SRC emacs-lisp
;; (require 'org-checklist)
#+END_SRC

*** Set org-log-done to true
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'note)
#+END_SRC

*** Set org-mode agenda files
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/gtd/inbox.org"
			   "~/gtd/gtd.org"
			   "~/gtd/tickler.org"))

#+END_SRC

*** Set priority range from A to C with default A
#+BEGIN_SRC emacs-lisp
  (setq org-highest-priority ?A)
  (setq org-lowest-priority ?C)
  (setq org-default-priority ?A)
#+END_SRC

*** Set colors for priorities
#+BEGIN_SRC emacs-lisp
  (setq org-priority-faces '((?A . (:foreground "#DC143C" :weight bold))
			     (?B . (:foreground "#FFA500"))
			     (?C . (:foreground "#48D1CC"))))
#+END_SRC

*** Org-mode templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
				 (file+headline "~/gtd/inbox.org" "Tasks")
				 "* TODO [#A] %i%?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n")
				("T" "Tickler" entry
				 (file+headline "~/gtd/tickler.org" "Tickler")
				 "* %i%? \n %U")))
#+END_SRC
*** open agenda in current window
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-window-setup (quote current-window))
#+END_SRC

*** Warn about any deadline in next 7 days
#+BEGIN_SRC emacs-lisp
  (setq org-deadline-warning-days 7)
#+END_SRC

*** Show tasks scheduled/due in next fortnight
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-span (quote fortnight))
#+END_SRC

*** Do not show tasks as scheduled if already shown as deadline
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
#+END_SRC

*** Do not give warning colors to tasks w/ impending deadlines
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
#+END_SRC

*** Do not show tasks that are scheduled or have deadlines in normal todo list
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-todo-ignore-deadlines (quote all))
  (setq org-agenda-todo-ignore-scheduled (quote all))
#+END_SRC

*** How tasks should be sorted
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-sorting-strategy
	(quote
	 ((agenda deadline-up priority-down)
	  (todo priority-down category-keep)
	  (tags priority-down category-keep)
	  (search category-keep))))
#+END_SRC

*** org-refile targets
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '(("~/gtd/gtd.org" :maxlevel . 3)
			     ("~/gtd/someday.org" :level . 1)
			     ("~/gtd/tickler.org" :maxlevel . 2)))
#+END_SRC
*** org-mode todo keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "SOMEDAY(s)" "PROJ(p)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+END_SRC

*** Turn off org-goto-auto-isearch
#+BEGIN_SRC emacs-lisp
  (setq org-goto-auto-isearch nil)

#+END_SRC
*** Set org-indent to 2
#+BEGIN_SRC emacs-lisp
  (setq org-list-indent-offset 2)
#+END_SRC
*** Save clock history across emacs sessions
#+BEGIN_SRC emacs-lisp
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
#+END_SRC

*** Syntax highlight text in block
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC
*** Maximum indentation for description lists
#+BEGIN_SRC emacs-lisp
  (setq org-list-description-max-indent 5)
#+END_SRC
*** prevent demoting heading
#+BEGIN_SRC emacs-lisp
  (setq org-adapt-indentation nil)

#+END_SRC

*** Have org-mode support programming languages
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '(
	(shell . t)
	(C . t)
	(python . t)
	(R . t)
	(ditaa . t)
	(gnuplot . t)
	))
   #+END_SRC

* Extra Packages
** package-list
#+BEGIN_SRC emacs-lisp
  ;; <use-package>
  ;; (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives
	       '(("melpa" . "http://melpa.org/packages/")
		 ("gnu" . "https://elpa.gnu.org/packages/")
		 ("org" . "http://orgmode.org/elpa/")))

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  ;; </use-package
#+END_SRC

** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t)

  (defun avy-goto-char-n (&optional n arg beg end &rest chars)
    (interactive (append '((prefix-numeric-value current-prefix-arg) nil nil nil)
	(let ((count 1)
	     (charList '()))
		 (while (<= count (prefix-numeric-value current-prefix-arg))
		   (push (read-char (format "char %d: " count) t) charList)
		   (setq count (1+ count))
		   )
		 (reverse charList))
	       )
    )

    (mapcar (lambda (char) (when (eq char ?) (setq char ?\n))) chars)
    (avy-with avy-goto-char-n
      (avy-jump
       (regexp-quote (concat chars))
       :window-flip arg
       :beg beg
       :end end)))

  (global-set-key (kbd "C-:") 'avy-goto-char-n)
#+END_SRC

** beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC
** Cider
    Package for clojure
#+BEGIN_SRC emacs-lisp
  ;; (use-package cider
  ;;  :ensure t)
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (setq company-idle-delay 0.5)
      (setq company-show-numbers t)
      (setq company-minimum-prefix-length 3)
      :bind (:map company-active-map
		  ("M-n" . nil)
		  ("M-p" . nil)
		  ("C-n" . company-select-next)
		  ("C-p" . company-select-previous)
		  ("SPC" . company-abort)
		  )
      )

      (defun ora-company-number ()
	"Forward to `company-complete-number'. 

	 Unless the number is potentially part of the candidate.
	 In that case, insert the number"
	(interactive)
	(let* ((k (this-command-keys))
	     (re (concat "^" command-prefix k)))
	(if (cl-find-if (lambda (s) (string-match re s))
			company-candidates)
	    (self-insert-command 1)
	  (company-complete-number (string-to-number k)))))

    ;;(mapc (lambda (x) (define-key company-active-map
    ;;		   (format "%d" x)
    ;;		   'ora-company-number))
    ;;	  (number-sequence 0 9))


#+END_SRC
** Company-irony
#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :ensure t
    :after company
    :config
    (add-to-list 'company-backends 'company-irony)
    )
#+END_SRC
** Company-jedi
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :config
    (defun my/python-mode-hook ()
      (add-to-list 'company-backends 'company-jedi))

    (add-hook 'python-mode-hook 'my/python-mode-hook)
    :after company
  )
#+END_SRC
** Exec-from-path-initialize
#+BEGIN_SRC emacs-lisp
;;  (use-package exec-path-from-shell
;;    :config
;;    (when (memq window-system '(mac ns x))
;;      (exec-path-from-shell-initialize))
;;    )
#+END_SRC

** Hydra
#+BEGIN_SRC emacs-lisp
  ;; (use-package hydra
  ;;  :config
  ;;  (defhydra hydra-zoom (global-map "<f2>")
  ;;    "zoom"
  ;;    ("g" text-scale-increase "in")
  ;;    ("l" text-scale-decrease "out"))

  ;;  (global-set-key
  ;;   (kbd "C-n")
  ;;   (defhydra hydra-move
  ;;     (:body-pre (next-line))
  ;;     "move"
  ;;     ("n" next-line)
  ;;     ("p" previous-line)
  ;;     ("f" forward-char)
  ;;     ("F" forward-word)
  ;;     ("b" backward-char)
  ;;     ("B" backward-word)
  ;;     ("a" move-beginning-of-line)
  ;;     ("A" backward-sentence)
  ;;     ("e" move-end-of-line)
  ;;     ("E" forward-sentence)
  ;;     ("v" scroll-up-command)
  ;;     ("V" scroll-down-command)
  ;;     ("l" recenter-top-bottom))
  ;;   )
  ;;  )


#+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t)
#+END_SRC

** htmlize
#+BEGIN_SRC emacs-lisp
;;  (use-package htmlize)
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . magit-status)
    ("C-x M-g" . magit-dispatch))
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    )

#+END_SRC
** Org Bullets
 #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
     :ensure t
     :config
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
 #+END_SRC
** Additional org packages
#+BEGIN_SRC emacs-lisp
  (require 'org-drill)
#+END_SRC
** Python mode
#+BEGIN_SRC emacs-lisp

  ;;  (use-package python-mode)
  ;;use-package 'python-mode
  ;; :config
  ;; (setq-default py-shell-name "ipython")
  ;; (setq-default py-which-bufname "IPython")
  ;;
  ;; (setq py-force-py-shell-name-p t)
  ;;
  ;; (setq py-shell-switch-buffers-on-execute-p t)
  ;; (setq py-switch-buffers-on-execute-p t)
  ;;
  ;; (setq py-split-windows-on-execute-p nil)
  ;;
  ;; (setq py-smart-indentation t)
  ;;
#+END_SRC
** rainbow
#+BEGIN_SRC emacs-lisp
  ;; (use-package rainbow-mode
  ;;  :ensure t
  ;;  :init (rainbow-mode 1))

#+END_SRC

** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper-isearch))

#+END_SRC
** switch-window
    Package to switch windows more quickly; Pressing C-x o now brings up a menu of keys
    corresponding to the window one wants to switch to
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))

#+END_SRC

** popup-kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring)
    :config
    (setq save-interprogram-paste-before-kill t))

#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+END_SRC

** 4clojure
#+BEGIN_SRC emacs-lisp
  (use-package 4clojure
    :ensure t)
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all)
    (yas-global-mode 1))

#+END_SRC
* Aesthetic Changes
** Change default tab-with to 4 spaces
#+BEGIN_SRC elisp
  (setq default-tab-width 4)
#+END_SRC
** Getting rid of all bars
*** Tool bar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

*** Menu bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

*** Scroll bar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
** Change modeline
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
  (set-face-attribute 'mode-line nil :background "light blue")
  (set-face-attribute 'mode-line-buffer-id nil :background "blue" :foreground)
  (defface mode-line-directory
    '((t : background "blue" :foreground "gray"))
    "Face used for buffer identification parts of the mode line."
    :group 'mode-line-faces
    :group 'basic-faces)

  (set-face-attribute 'mode-line-highlight nil :box nil :background "deep sky blue")
  (set-face-attribute 'mode-line-inactive nil :inherit 'default)

  (setq mode-line-position
	'((line-number-mode ("%l" (column-number-mode ":%c")))))

  (defun shorten-directory (dir max-length)
    "Show up to `max-length' characters of a directory name `dir'."
    (let ((path (reverse (split-string (abbreviate-file-name dir) "/")))
	  (output ""))
      (when (and path (equal "" (car path)))
	(setq path (cdr path)))
      (while (and path (< (length output) (- max-length 4)))
	(setq output (concat (car path) "/" output))
	(setq path (cdr path)))
      (when path
	(setq output (concat ".../" output)))
      output))

  (defvar mode-line-directory
    '(:propertize
      (:eval (if (buffer-file-name) (concat " " (shorten-directory default-directory 20)) " "))
      face mode-line-directory)
    "Formats the current directory.")
  (put 'mode-line-directory 'risky-local-variable t)

  (setq-default mode-line-buffer-identification
		(propertized-buffer-identification "%b "))

  (setq-default mode-line-format
		'("%e"
		  mode-line-front-space
		  ;; mode-line-mule-info --
		  mode-line-client
		  mode-line-modified
		  ;; mode-line-remote -- no need to indicate this specially
		  ;; mode-line-frame-identification
		  " "
		  mode-line-directory
		  mode-line-buffer-identication
		  " "
		  mode-line-position
		  (flycheck-mode flycheck-mode-line)
		  " "
		  mode-line-modes
		  mode-line-misc-info
		  mode-line-end-spaces))
#+END_SRC
** Highlight current line
#+BEGIN_SRC emacs-lisp
(when window-system (global-hl-line-mode t))
#+END_SRC
** Prettify symbols
#+BEGIN_SRC emacs-lisp
(when window-system (global-prettify-symbols-mode t))
#+END_SRC
** Set font to M+ 1mn
#+BEGIN_SRC emacs-lisp
  (set-frame-font "M+ 1mn")
#+END_SRC
** Make emacs theme moe
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'moe-theme)
  (package-refresh-contents)
  (package-install 'moe-theme))

(require 'moe-theme)
(moe-light)
#+END_SRC
* Language-Specific Settings
** C
#+BEGIN_SRC elisp
  (setq-default c-basic-offset 4)
#+END_SRC
** Clojure
#+BEGIN_SRC elisp
  (use-package cider)
#+END_SRC
* Terminal
** Setting default shell to bash
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

